from datetime import datetime, timedelta
from fhir.resources.observation import Observation
from fhir.resources.codeableconcept import CodeableConcept
from fhir.resources.coding import Coding
from fhir.resources.quantity import Quantity
from fhir.resources.reference import Reference
from fhir.resources.extension import Extension
from printresource import print_fhir_resource
from zoneinfo import ZoneInfo
from typing import Optional

class HeartRateObservation(Observation):
    def __init__(self, subject_id: str, heart_rate_value: int, minutes_ago: int = 0, effective_dt: Optional[datetime] = None):
        """
        :param subject_id: The FHIR patient id (e.g., "2").
        :param heart_rate_value: The measured heart rate.
        :param minutes_ago: The number of minutes behind current time if effective_dt is not provided.
        :param effective_dt: An optional timezone-aware datetime to use as the effectiveDateTime.
        """
        # Create the Observation using the provided parameters.
        obs = self.create_heart_rate_observation3(subject_id, heart_rate_value, minutes_ago, effective_dt)
        super().__init__(**obs.dict())
        
        # Create the custom reporter extension.
        heart_monitor_extension = Extension(
            url="http://mobilemonitor.com/heartrate",
            valueString="mobile1"
        )
        
        # Add the extension, preserving any existing extensions.
        if self.extension is None:
            self.extension = [heart_monitor_extension]
        else:
            self.extension.append(heart_monitor_extension)
    
    def create_heart_rate_observation3(self, subject_id: str, heart_rate_value: int, minutes_ago: int = 0, effective_dt: Optional[datetime] = None) -> Observation:
        """
        Creates a FHIR Observation resource for heart rate.
        
        If effective_dt is provided, it is used as the effectiveDateTime.
        Otherwise, the effectiveDateTime is generated by subtracting minutes_ago from the current Eastern time.
        
        :param subject_id: The FHIR Id of the subject (e.g., "Patient/123").
        :param heart_rate_value: The measured heart rate as an integer.
        :param minutes_ago: Minutes to subtract from current time if effective_dt is None.
        :param effective_dt: Optional timezone-aware datetime to be used directly.
        :return: An Observation resource object.
        """
        # Create a Coding object for the heart rate code.
        heart_rate_coding = Coding(
            system="http://loinc.org",
            code="8867-4",
            display="Heart rate"
        )
        
        # Attach the coding to a CodeableConcept object.
        heart_rate_code = CodeableConcept(
            coding=[heart_rate_coding],
            text="Heart rate"
        )
        
        # Create a Coding object for the observation category.
        vital_signs_coding = Coding(
            system="http://terminology.hl7.org/CodeSystem/observation-category",
            code="vital-signs",
            display="Vital Signs"
        )
        
        # Attach the coding to a CodeableConcept for the category.
        vital_signs_category = CodeableConcept(
            coding=[vital_signs_coding],
            text="Vital Signs"
        )
        
        # Determine effectiveDateTime: use effective_dt if provided; otherwise, generate using minutes_ago.
        if effective_dt is not None:
            effective_date_time_str = effective_dt.isoformat()
        else:
            effective_date_time_str = self.get_eastern_time_string(minutes_ago)
        
        # Construct the Observation resource.
        observation = Observation(
            status="final",
            category=[vital_signs_category],
            code=heart_rate_code,
            subject=Reference(reference=f"Patient/{subject_id}"),
            effectiveDateTime=effective_date_time_str,
            valueQuantity=Quantity(
                value=heart_rate_value,
                unit="beats/minute",
                system="http://unitsofmeasure.org",
                code="/min"
            )
        )
        
        return observation

    def get_eastern_time_string(self, minutes_behind: int = 0) -> str:
        """
        Returns a timezone-aware ISO 8601 datetime string for Eastern Time,
        subtracting a specified number of minutes.
        
        :param minutes_behind: Minutes to subtract from the current Eastern Time.
        :return: ISO 8601 formatted datetime string.
        """
        now_eastern = datetime.now(ZoneInfo("America/New_York"))
        adjusted_time = now_eastern - timedelta(minutes=minutes_behind)
        return adjusted_time.isoformat()


if __name__ == "__main__":
    print("\n--- Creating Observation using sample parameters ---")
    # Example: without providing an explicit effective datetime.
    hrobs = HeartRateObservation("2", 75, minutes_ago=5)
    print_fhir_resource(hrobs)
    
    # Example: using a specific effective datetime.
    specific_dt = datetime(2025, 3, 15, 12, 30, tzinfo=ZoneInfo("America/New_York"))
    hrobs2 = HeartRateObservation("2", 80, effective_dt=specific_dt)
    print_fhir_resource(hrobs2)
